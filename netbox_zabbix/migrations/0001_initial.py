# Generated by Django 5.1.7 on 2025-05-05 16:10

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("extras", "0123_journalentry_kind_default"),
    ]

    operations = [
        migrations.CreateModel(
            name="Config",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255)),
                ("api_endpoint", models.CharField(max_length=255)),
                ("web_address", models.CharField(max_length=255)),
                ("token", models.CharField(max_length=255)),
                ("connection", models.BooleanField(default=False)),
                ("last_checked_at", models.DateTimeField(blank=True, null=True)),
                ("version", models.CharField(blank=True, max_length=255, null=True)),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Zabbix Configuration",
                "verbose_name_plural": "Zabbix Configurations",
            },
        ),
        migrations.CreateModel(
            name="Template",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("name", models.CharField(max_length=255)),
                ("templateid", models.CharField(max_length=255)),
                ("last_synced", models.DateTimeField(blank=True, null=True)),
                ("marked_for_deletion", models.BooleanField(default=False)),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Zabbix Template",
                "verbose_name_plural": "Zabbix Templates",
            },
        ),
        migrations.CreateModel(
            name="Host",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder),
                ),
                ("object_id", models.PositiveIntegerField(default=0)),
                ("zabbix_host_id", models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ("status", models.CharField(default="enabled", max_length=255)),
                (
                    "content_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(("app_label", "dcim"), ("model", "device")),
                            models.Q(("app_label", "virtualization"), ("model", "virtualmachine")),
                            _connector="OR",
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="zabbix",
                        to="contenttypes.contenttype",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                ("templates", models.ManyToManyField(blank=True, to="netbox_zabbix.template")),
            ],
            options={
                "verbose_name": "Zabbix Host",
                "verbose_name_plural": "Zabbix Hosts",
            },
        ),
    ]
